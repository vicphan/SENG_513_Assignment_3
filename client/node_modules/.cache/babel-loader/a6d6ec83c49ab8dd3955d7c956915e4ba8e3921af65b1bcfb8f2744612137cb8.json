{"ast":null,"code":"var _jsxFileName = \"/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js\";\nimport Board from \"./board\";\nimport React from \"react\";\nimport PopUp from \"./pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { connect } from \"socket.io-client\";\n\n// Includes all the game logic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.connectToServer = () => {\n      const socket = socketIOClient('http://localhost:5678');\n      return socket;\n    };\n    this.player_color = [\"blue\", \"yellow\", \"red\"];\n    this.player_names = props.players;\n    this.state = {\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0),\n      open_window: false\n    };\n    this.socket = this.connectToServer();\n  }\n  // Determines which boxes are have been completed (all four sides have been filled)\n  // Takes in game board (array) and index (position on game board that has been recently filled)\n  // Returns indices of boxes (set in board) that have been completed so that they can be filled by a color\n  calculateBoxFilled(board, index) {\n    const winning_indices = [[0, 3, 4, 7], [1, 4, 5, 8], [2, 5, 6, 9], [7, 10, 11, 14], [8, 11, 12, 15], [9, 12, 13, 16], [14, 17, 18, 21], [15, 18, 19, 22], [16, 19, 20, 23]];\n    let indices = [];\n    let box_filled = true;\n    for (let i = 0; i < winning_indices.length; i++) {\n      if (winning_indices[i].includes(index)) {\n        for (let j = 0; j < winning_indices[i].length; j++) {\n          if (board[winning_indices[i][j]] === null) {\n            box_filled = false;\n          }\n        }\n        if (box_filled) {\n          indices.push(i);\n        }\n        box_filled = true;\n      }\n    }\n    return indices;\n  }\n\n  // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n  // Takes in unique identifier (ID) assigned to all lines in board \n  handleClick(i) {\n    if (this.state.board.at(i) !== null) {\n      return;\n    }\n\n    // update line with player color\n    const color = this.player_color[this.state.player_turn - 1];\n    this.changeLineColor(i, color);\n\n    // update game logic\n    let board = this.state.board.slice();\n    let score = this.state.score.slice();\n    let open_window = false;\n    board[i] = this.state.player_turn;\n    const step = this.state.step + 1;\n    const box_filled = this.calculateBoxFilled(board, i);\n    let player_turn = this.state.player_turn;\n    if (box_filled.length !== 0) {\n      // fill in completed boxes with player color\n      this.displayBoxColor(box_filled, color);\n      // update score\n      score[this.state.player_turn - 1] += box_filled.length;\n    } else {\n      player_turn = this.state.player_turn + 1;\n      if (player_turn % 4 === 0) {\n        player_turn = 1;\n      }\n    }\n    if (step > 24) {\n      // open pop up window when game has been completed\n      open_window = true;\n    }\n    // update state\n    this.setState({\n      player_turn: player_turn,\n      step: step,\n      board: board,\n      score: score,\n      open_window: open_window\n    });\n  }\n\n  // changes either vertical or horizontal line based on color passed in\n  displayLineColor(color) {\n    let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n    let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n    let style = document.createElement('style');\n    style.appendChild(document.createTextNode(css_h_line));\n    style.appendChild(document.createTextNode(css_v_line));\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n\n  // displays box color based on indice and color specified\n  displayBoxColor(indices, color) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (document.getElementById(\"empty_box_\" + index)) {\n        document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n      } else {\n        let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n        let style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n    }\n  }\n\n  // resets boxes to default color\n  resetBoxColors() {\n    console.log(\"reset box colors\");\n    this.displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n  }\n\n  // changes specified line to specified color\n  changeLineColor(index, color) {\n    document.getElementById(\"line_\" + index).style.backgroundColor = color;\n  }\n\n  // reset all line colors to default\n  resetLineColors() {\n    for (let i = 0; i < 24; i++) {\n      document.getElementById(\"line_\" + i).style.backgroundColor = null;\n    }\n  }\n\n  // restarts game by resetting states\n  restartGame() {\n    this.setState({\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0),\n      open_window: false\n    });\n    this.resetLineColors();\n    this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n    this.resetBoxColors();\n  }\n\n  // closes window by setting open_window state to false\n  close_window() {\n    const player_turn = this.state.player_turn;\n    const step = this.state.step;\n    const board = this.state.board;\n    const score = this.state.score;\n    this.setState({\n      player_turn: player_turn,\n      step: step,\n      board: board,\n      score: score,\n      open_window: false\n    });\n  }\n  render() {\n    this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n    const empty_box_ids = [[\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"], [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"], [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Current turn:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 46\n          }, this), \" \", this.player_names[this.state.player_turn - 1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[0], \": \", this.state.score[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[1], \": \", this.state.score[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[2], \": \", this.state.score[2]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_div center padding_top_bottom\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n          type: \"back\",\n          onClick: () => this.props.nav()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n          type: \"replay\",\n          onClick: this.restartGame.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        empty_box_ids: empty_box_ids,\n        handleClick: this.handleClick.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PopUp, {\n        open_window: this.state.open_window,\n        close_window: this.close_window.bind(this),\n        restart_game: this.restartGame.bind(this),\n        player_names: this.player_names,\n        score: this.state.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;","map":{"version":3,"names":["Board","React","PopUp","ButtonWithIcon","connect","Game","Component","constructor","props","connectToServer","socket","socketIOClient","player_color","player_names","players","state","player_turn","step","board","Array","fill","score","open_window","calculateBoxFilled","index","winning_indices","indices","box_filled","i","length","includes","j","push","handleClick","at","color","changeLineColor","slice","displayBoxColor","setState","displayLineColor","css_h_line","css_v_line","style","document","createElement","appendChild","createTextNode","getElementsByTagName","getElementById","backgroundColor","css","resetBoxColors","console","log","resetLineColors","restartGame","close_window","render","empty_box_ids","nav","bind"],"sources":["/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js"],"sourcesContent":["import Board from \"./board\";\nimport React from \"react\";\nimport PopUp from \"./pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { connect } from \"socket.io-client\";\n\n// Includes all the game logic\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.player_color = [\"blue\", \"yellow\", \"red\"];\n        this.player_names = props.players;\n        this.state = {\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0),\n            open_window: false\n        }\n        this.socket = this.connectToServer();\n    }\n\n    connectToServer = () => {\n        const socket = socketIOClient('http://localhost:5678');\n        return socket;\n    }\n\n    // Determines which boxes are have been completed (all four sides have been filled)\n    // Takes in game board (array) and index (position on game board that has been recently filled)\n    // Returns indices of boxes (set in board) that have been completed so that they can be filled by a color\n    calculateBoxFilled(board, index) {\n        const winning_indices = [\n            [0, 3, 4, 7],\n            [1, 4, 5, 8],\n            [2, 5, 6, 9],\n            [7, 10, 11, 14],\n            [8, 11, 12, 15],\n            [9, 12, 13, 16],\n            [14, 17, 18, 21],\n            [15, 18, 19, 22],\n            [16, 19, 20, 23]\n        ]\n\n        let indices = [];\n        let box_filled = true;\n\n        for (let i = 0; i < winning_indices.length; i++) {\n            if (winning_indices[i].includes(index)) {\n                for (let j = 0; j < winning_indices[i].length; j++) {\n                    if (board[winning_indices[i][j]] === null) {\n                        box_filled = false;\n                    }\n                }\n                if (box_filled) {\n                    indices.push(i);\n                }\n                box_filled = true;\n            }\n        }\n\n        return indices;\n    }\n\n    // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n    // Takes in unique identifier (ID) assigned to all lines in board \n    handleClick(i) {\n        if (this.state.board.at(i) !== null) {\n            return;\n        }\n\n        // update line with player color\n        const color = this.player_color[this.state.player_turn - 1]\n        this.changeLineColor(i, color);\n\n        // update game logic\n        let board = this.state.board.slice();\n        let score = this.state.score.slice();\n        let open_window = false;\n        board[i] = this.state.player_turn;\n        const step = this.state.step + 1;\n        const box_filled = this.calculateBoxFilled(board, i);\n        let player_turn = this.state.player_turn;\n        if (box_filled.length !== 0) {\n            // fill in completed boxes with player color\n            this.displayBoxColor(box_filled, color);\n            // update score\n            score[this.state.player_turn - 1] += box_filled.length;\n        }\n        else {\n            player_turn = this.state.player_turn + 1;\n            if (player_turn % 4 === 0) {\n                player_turn = 1;\n            }\n\n        }\n        if (step > 24){\n            // open pop up window when game has been completed\n            open_window = true;\n        }\n        // update state\n        this.setState({\n            player_turn: player_turn,\n            step: step,\n            board: board,\n            score: score,\n            open_window: open_window\n        }\n        )\n    }\n\n    // changes either vertical or horizontal line based on color passed in\n    displayLineColor(color) {\n        let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n        let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n\n        let style = document.createElement('style');\n\n        style.appendChild(document.createTextNode(css_h_line));\n        style.appendChild(document.createTextNode(css_v_line));\n\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    // displays box color based on indice and color specified\n    displayBoxColor(indices, color) {\n        for (let i = 0; i < indices.length; i++) {\n            let index = indices[i];\n            if (document.getElementById(\"empty_box_\" + index)) {\n                document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n            }\n            else {\n                let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n                let style = document.createElement('style');\n\n                style.appendChild(document.createTextNode(css));\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        }\n\n    }\n\n    // resets boxes to default color\n    resetBoxColors() {\n        console.log(\"reset box colors\")\n        this.displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n    }\n\n    // changes specified line to specified color\n    changeLineColor(index, color) {\n        document.getElementById(\"line_\" + index).style.backgroundColor = color;\n    }\n\n    // reset all line colors to default\n    resetLineColors() {\n        for (let i = 0; i < 24; i++) {\n            document.getElementById(\"line_\" + i).style.backgroundColor = null;\n        }\n    }\n\n    // restarts game by resetting states\n    restartGame() {\n        this.setState({\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0),\n            open_window: false\n        });\n        this.resetLineColors();\n        this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n        this.resetBoxColors();\n    }\n\n    // closes window by setting open_window state to false\n    close_window() {\n        const player_turn = this.state.player_turn;\n        const step = this.state.step;\n        const board = this.state.board;\n        const score = this.state.score;\n        this.setState({\n            player_turn: player_turn,\n            step: step,\n            board: board,\n            score: score,\n            open_window: false\n        })\n    }\n\n    render() {\n        this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n\n        const empty_box_ids = [\n            [\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"],\n            [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"],\n            [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]\n        ]\n\n        return (\n            <div>\n                <div className=\"center\">\n                    <p className=\"info_text\"><b>Current turn:</b> {this.player_names[this.state.player_turn-1]}</p>\n                    <p className=\"info_text\">{this.player_names[0]}: {this.state.score[0]}</p>\n                    <p className=\"info_text\">{this.player_names[1]}: {this.state.score[1]}</p>\n                    <p className=\"info_text\">{this.player_names[2]}: {this.state.score[2]}</p>\n                </div>\n                <div className=\"button_div center padding_top_bottom\">\n                    <ButtonWithIcon type=\"back\" onClick={() => this.props.nav()} />\n                    <ButtonWithIcon type=\"replay\" onClick={this.restartGame.bind(this)} />\n                </div>\n                <Board empty_box_ids={empty_box_ids} handleClick={this.handleClick.bind(this)} />\n                <PopUp open_window={this.state.open_window} close_window={this.close_window.bind(this)} restart_game={this.restartGame.bind(this)} player_names={this.player_names} score={this.state.score}/>\n            </div>\n        );\n    }\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}