{"ast":null,"code":"var _jsxFileName = \"/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js\";\nimport Board from \"./board\";\nimport React from \"react\";\nimport PopUp from \"./pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { socket } from '../../context/socket';\n\n// Includes all the game logic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    console.log(props);\n    super(props);\n    this.socket = socket;\n    this.player_color = [\"blue\", \"yellow\", \"red\"];\n    this.player = this.props.player;\n    this.player_number = this.props.player_number;\n    this.player_names = this.props.player_names;\n    this.state = {\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0),\n      player: \"Player\"\n    };\n    this.winner_message = null;\n    this.initSocketEvents();\n  }\n  initSocketEvents() {\n    socket.on(\"playerTurnTaken\", function (data) {\n      this.updateState(data.player_turn, data.step, data.board, data.score);\n      if (data.player !== this.player_number) {\n        const index = data.index;\n        const color = this.player_color[data.player - 1];\n        this.changeLineColor(index, color);\n      }\n    });\n    socket.on(\"boxFilled\", function (data) {\n      this.displayBoxColor(data.indices, this.player_color[data.player - 1]);\n    });\n    socket.on(\"gameOver\", function (data) {\n      this.state.open_window = true;\n      this.winner_message = data.winner_string;\n    });\n  }\n  updateState(player_turn, step, board, score) {\n    this.setState({\n      player_turn: player_turn,\n      step: step,\n      board: board,\n      score: score,\n      open_window: false\n    });\n  }\n\n  // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n  // Takes in unique identifier (ID) assigned to all lines in board \n  handleClick(i) {\n    if (this.state.player_turn !== this.this_player_number) {\n      alert(\"Not your turn!\");\n    }\n    if (this.state.board.at(i) !== null) {\n      alert(\"Invalid move!\");\n    }\n    const index = i;\n    const player = this.player_number;\n    socket.emit(\"handleClick\", {\n      player,\n      index\n    });\n  }\n\n  // changes either vertical or horizontal line based on color passed in\n  displayLineColor(color) {\n    let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n    let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n    let style = document.createElement('style');\n    style.appendChild(document.createTextNode(css_h_line));\n    style.appendChild(document.createTextNode(css_v_line));\n    document.getElementsByTagName('head')[0].appendChild(style);\n  }\n\n  // displays box color based on indice and color specified\n  displayBoxColor(indices, color) {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (document.getElementById(\"empty_box_\" + index)) {\n        document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n      } else {\n        let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n        let style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n    }\n  }\n\n  // resets boxes to default color\n  resetBoxColors() {\n    console.log(\"reset box colors\");\n    this.displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n  }\n\n  // changes specified line to specified color\n  changeLineColor(index, color) {\n    document.getElementById(\"line_\" + index).style.backgroundColor = color;\n  }\n\n  // reset all line colors to default\n  resetLineColors() {\n    for (let i = 0; i < 24; i++) {\n      document.getElementById(\"line_\" + i).style.backgroundColor = null;\n    }\n  }\n\n  // restarts game by resetting states\n  restartGame() {\n    this.setState({\n      player_turn: 1,\n      step: 1,\n      board: Array(24).fill(null),\n      score: Array(3).fill(0),\n      open_window: false\n    });\n    this.resetLineColors();\n    this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n    this.resetBoxColors();\n  }\n\n  // closes window by setting open_window state to false\n  close_window() {\n    const player_turn = this.state.player_turn;\n    const step = this.state.step;\n    const board = this.state.board;\n    const score = this.state.score;\n    this.setState({\n      player_turn: player_turn,\n      step: step,\n      board: board,\n      score: score,\n      open_window: false\n    });\n  }\n  render() {\n    if (this.state.player_turn === this.player_number) {\n      this.displayLineColor(this.player_color[this.player_number - 1]);\n    }\n    const empty_box_ids = [[\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"], [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"], [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]];\n    const goBack = this.props.nav;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Current turn:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 46\n          }, this), \" \", this.player_names[this.state.player_turn - 1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[0], \": \", this.state.score[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[1], \": \", this.state.score[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info_text\",\n          children: [this.player_names[2], \": \", this.state.score[2]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_div center padding_top_bottom\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n          type: \"back\",\n          onClick: () => goBack()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n          type: \"replay\",\n          onClick: this.restartGame.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        empty_box_ids: empty_box_ids,\n        handleClick: this.handleClick.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PopUp, {\n        open_window: this.state.open_window,\n        close_window: this.close_window.bind(this),\n        restart_game: this.restartGame.bind(this),\n        player_names: this.player_names,\n        score: this.state.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;","map":{"version":3,"names":["Board","React","PopUp","ButtonWithIcon","socket","Game","Component","constructor","props","console","log","player_color","player","player_number","player_names","state","player_turn","step","board","Array","fill","score","winner_message","initSocketEvents","on","data","updateState","index","color","changeLineColor","displayBoxColor","indices","open_window","winner_string","setState","handleClick","i","this_player_number","alert","at","emit","displayLineColor","css_h_line","css_v_line","style","document","createElement","appendChild","createTextNode","getElementsByTagName","length","getElementById","backgroundColor","css","resetBoxColors","resetLineColors","restartGame","close_window","render","empty_box_ids","goBack","nav","bind"],"sources":["/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js"],"sourcesContent":["import Board from \"./board\";\nimport React from \"react\";\nimport PopUp from \"./pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { socket } from '../../context/socket';\n\n\n// Includes all the game logic\nclass Game extends React.Component {\n    constructor(props) {\n        console.log(props);\n        super(props);\n        this.socket = socket;\n        this.player_color = [\"blue\", \"yellow\", \"red\"];\n        this.player = this.props.player;\n        this.player_number = this.props.player_number;\n        this.player_names = this.props.player_names;\n        this.state = {\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0),\n            player: \"Player\"\n        }\n        this.winner_message = null;\n        this.initSocketEvents();\n    }\n\n    initSocketEvents(){\n        socket.on(\"playerTurnTaken\", function(data){\n            this.updateState(data.player_turn, data.step, data.board, data.score);\n            if (data.player !== this.player_number){\n                const index = data.index;\n                const color = this.player_color[data.player-1];\n                this.changeLineColor(index, color);\n            }\n        })\n        socket.on(\"boxFilled\", function(data){\n            this.displayBoxColor(data.indices, this.player_color[data.player-1]);\n        })\n        socket.on(\"gameOver\", function(data){\n            this.state.open_window = true;\n            this.winner_message = data.winner_string;\n        })\n    }\n\n    updateState(player_turn, step, board, score){\n        this.setState({\n            player_turn: player_turn,\n            step: step,\n            board: board,\n            score: score,\n            open_window: false\n        })\n    }\n\n    // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n    // Takes in unique identifier (ID) assigned to all lines in board \n    handleClick(i) {\n        if (this.state.player_turn !== this.this_player_number){\n            alert(\"Not your turn!\");\n        }\n        if (this.state.board.at(i) !== null){\n            alert(\"Invalid move!\");\n        }\n        const index = i;\n        const player = this.player_number;\n        socket.emit(\"handleClick\", {player, index});\n    }\n\n    // changes either vertical or horizontal line based on color passed in\n    displayLineColor(color) {\n        let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n        let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n\n        let style = document.createElement('style');\n\n        style.appendChild(document.createTextNode(css_h_line));\n        style.appendChild(document.createTextNode(css_v_line));\n\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    // displays box color based on indice and color specified\n    displayBoxColor(indices, color) {\n        for (let i = 0; i < indices.length; i++) {\n            let index = indices[i];\n            if (document.getElementById(\"empty_box_\" + index)) {\n                document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n            }\n            else {\n                let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n                let style = document.createElement('style');\n\n                style.appendChild(document.createTextNode(css));\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        }\n\n    }\n\n    // resets boxes to default color\n    resetBoxColors() {\n        console.log(\"reset box colors\")\n        this.displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n    }\n\n    // changes specified line to specified color\n    changeLineColor(index, color) {\n        document.getElementById(\"line_\" + index).style.backgroundColor = color;\n    }\n\n    // reset all line colors to default\n    resetLineColors() {\n        for (let i = 0; i < 24; i++) {\n            document.getElementById(\"line_\" + i).style.backgroundColor = null;\n        }\n    }\n\n    // restarts game by resetting states\n    restartGame() {\n        this.setState({\n            player_turn: 1,\n            step: 1,\n            board: Array(24).fill(null),\n            score: Array(3).fill(0),\n            open_window: false\n        });\n        this.resetLineColors();\n        this.displayLineColor(this.player_color[this.state.player_turn - 1]);\n        this.resetBoxColors();\n    }\n\n    // closes window by setting open_window state to false\n    close_window() {\n        const player_turn = this.state.player_turn;\n        const step = this.state.step;\n        const board = this.state.board;\n        const score = this.state.score;\n        this.setState({\n            player_turn: player_turn,\n            step: step,\n            board: board,\n            score: score,\n            open_window: false\n        })\n    }\n\n    render() {\n        if (this.state.player_turn === this.player_number){\n            this.displayLineColor(this.player_color[this.player_number - 1]);\n        }\n\n        const empty_box_ids = [\n            [\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"],\n            [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"],\n            [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]\n        ]\n\n        const goBack = this.props.nav;\n\n        return (\n            <div>\n                <div className=\"center\">\n                    <p className=\"info_text\"><b>Current turn:</b> {this.player_names[this.state.player_turn-1]}</p>\n                    <p className=\"info_text\">{this.player_names[0]}: {this.state.score[0]}</p>\n                    <p className=\"info_text\">{this.player_names[1]}: {this.state.score[1]}</p>\n                    <p className=\"info_text\">{this.player_names[2]}: {this.state.score[2]}</p>\n                </div>\n                <div className=\"button_div center padding_top_bottom\">\n                    <ButtonWithIcon type=\"back\" onClick={() => goBack()} />\n                    <ButtonWithIcon type=\"replay\" onClick={this.restartGame.bind(this)} />\n                </div>\n                <Board empty_box_ids={empty_box_ids} handleClick={this.handleClick.bind(this)} />\n                <PopUp open_window={this.state.open_window} close_window={this.close_window.bind(this)} restart_game={this.restartGame.bind(this)} player_names={this.player_names} score={this.state.score}/>\n            </div>\n        );\n    }\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}