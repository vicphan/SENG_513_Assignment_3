{"ast":null,"code":"var _jsxFileName = \"/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js\",\n  _s = $RefreshSig$();\nimport Board from \"./board\";\nimport React, { useEffect, useState } from \"react\";\nimport WinnerPopUp from \"./popups/winner_pop_up\";\nimport GoBackPopUp from \"./popups/go_back_pop_up\";\nimport PlayerDisconnected from \"./popups/pd_pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { socket as soc } from '../../context/socket';\nimport { useCookies } from \"react-cookie\";\n\n// Includes all the game logic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = _ref => {\n  _s();\n  let {\n    nav,\n    p,\n    player_number,\n    player_names\n  } = _ref;\n  const socket = soc;\n  const playerColor = [\"blue\", \"yellow\", \"red\"];\n  const emptyBoxIDs = [[\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"], [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"], [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]];\n  const player = p;\n  const playerNumber = player_number;\n  const playerNames = player_names;\n  const [cookies, setCookies, removeCookie] = useCookies(['step', 'board', 'score', 'playerTurn']);\n  const [playerTurn, setPlayerTurn] = useState(cookies.playerTurn || 1);\n  const [step, setStep] = useState(cookies.step || 1);\n  const [board, setBoard] = useState(cookies.board || Array(24).fill(null));\n  const [score, setScore] = useState(cookies.score || Array(3).fill(0));\n  const [openWindow, setOpenWindow] = useState(false);\n  const [openGoBack, setOpenGoBack] = useState(false);\n  const [playerDisconnected, setPlayerDisconnected] = useState(false);\n  const [winnerString, setWinnerString] = useState(null);\n  useEffect(() => {\n    function initSocketEvents() {\n      socket.on(\"playerTurnTaken\", function (data) {\n        updateState(data.player_turn, data.step, data.board, data.score);\n        const index = data.index;\n        const color = playerColor[data.player - 1];\n        changeLineColor(index, color);\n      });\n      socket.on(\"boxFilled\", function (data) {\n        displayBoxColor(data.indices, playerColor[data.player - 1]);\n      });\n      socket.on(\"gameOver\", function (data) {\n        gameOver(data.winner_string);\n      });\n      socket.on(\"playerDisconnected\", function (data) {\n        removeCookies();\n        socket.disconnect();\n        setPlayerDisconnected(true);\n      });\n      socket.on(\"restartGame\", function (data) {\n        restartGame();\n      });\n    }\n    function displayLine() {\n      displayLineColor(playerColor[playerNumber - 1]);\n    }\n    function colorLines() {\n      for (let i = 0; i < 24; i++) {\n        let player = board.at(i);\n        if (player !== null) {\n          let color = playerColor[player - 1];\n          changeLineColor(i, color);\n        }\n      }\n    }\n    initSocketEvents();\n    displayLine();\n    if (step === 1) {\n      colorLines();\n    }\n  });\n  const removeCookies = () => {\n    removeCookie('playerTurn', {\n      path: '/'\n    });\n    removeCookie('step', {\n      path: '/'\n    });\n    removeCookie('board', {\n      path: '/'\n    });\n    removeCookie('score', {\n      path: '/'\n    });\n  };\n  const gameOver = winner_string => {\n    removeCookies();\n    socket.disconnect();\n    setWinnerString(winner_string);\n    setOpenGoBack(false);\n    setOpenWindow(true);\n    setPlayerDisconnected(false);\n  };\n  const goBackPopUpAppear = () => {\n    setOpenGoBack(true);\n    setOpenWindow(false);\n    setPlayerDisconnected(false);\n  };\n  const updateState = (player_turn, _step, _board, _score) => {\n    setPlayerTurn(player_turn);\n    setCookies('playerTurn', player_turn, {\n      path: '/'\n    });\n    setStep(_step);\n    setCookies('step', _step, {\n      path: '/'\n    });\n    setBoard(_board);\n    setCookies('board', _board, {\n      path: '/'\n    });\n    setScore(_score);\n    setCookies('score', _score, {\n      path: '/'\n    });\n  };\n\n  // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n  // Takes in unique identifier (ID) assigned to all lines in board \n  const handleClick = i => {\n    if (playerTurn !== playerNumber) {\n      alert(\"Not your turn!\");\n      return;\n    }\n    if (board.at(i) !== null) {\n      alert(\"Invalid move!\");\n      return;\n    }\n    const index = i;\n    const player = playerNumber;\n    socket.emit(\"handleClick\", {\n      player,\n      index\n    });\n  };\n\n  // changes either vertical or horizontal line based on color passed in\n  const displayLineColor = color => {\n    let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n    let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n    let style = document.createElement('style');\n    style.appendChild(document.createTextNode(css_h_line));\n    style.appendChild(document.createTextNode(css_v_line));\n    document.getElementsByTagName('head')[0].appendChild(style);\n  };\n\n  // displays box color based on indice and color specified\n  const displayBoxColor = (indices, color) => {\n    for (let i = 0; i < indices.length; i++) {\n      let index = indices[i];\n      if (document.getElementById(\"empty_box_\" + index)) {\n        document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n      } else {\n        let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n        let style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName('head')[0].appendChild(style);\n      }\n    }\n  };\n\n  // resets boxes to default color\n  const resetBoxColors = () => {\n    displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n  };\n\n  // changes specified line to specified color\n  const changeLineColor = (index, color) => {\n    document.getElementById(\"line_\" + index).style.backgroundColor = color;\n  };\n\n  // reset all line colors to default\n  const resetLineColors = () => {\n    for (let i = 0; i < 24; i++) {\n      document.getElementById(\"line_\" + i).style.backgroundColor = null;\n    }\n  };\n\n  // restarts game by resetting states\n  const restartGame = () => {\n    alert(\"Game was restarted by one of the players\");\n    removeCookies();\n    setPlayerTurn(1);\n    setStep(1);\n    setBoard(Array(24).fill(null));\n    setScore(Array(3).fill(0));\n    setOpenGoBack(false);\n    setOpenWindow(false);\n    setPlayerDisconnected(false);\n    setWinnerString(null);\n    resetLineColors();\n    displayLineColor(playerColor[playerTurn - 1]);\n    resetBoxColors();\n  };\n  const sendRestartGame = () => {\n    socket.emit(\"restartGame\");\n  };\n\n  // closes window by setting open_window state to false\n  const closeWindow = () => {\n    setOpenWindow(false);\n  };\n  const quitGame = () => {\n    socket.emit(\"playerDisconnected\", {\n      playerNumber\n    });\n    removeCookies();\n    socket.disconnect();\n    const goBack = nav;\n    goBack();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"info_text\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Current turn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 42\n        }, this), \" \", playerNames[playerTurn - 1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"info_text\",\n        children: [playerNames[0], \": \", score[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"info_text\",\n        children: [playerNames[1], \": \", score[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"info_text\",\n        children: [playerNames[2], \": \", score[2]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button_div center padding_top_bottom\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n        type: \"back\",\n        onClick: goBackPopUpAppear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonWithIcon, {\n        type: \"replay\",\n        onClick: sendRestartGame.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      empty_box_ids: emptyBoxIDs,\n      handleClick: handleClick.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WinnerPopUp, {\n      open_window: openWindow,\n      close_window: closeWindow.bind(this),\n      main_menu: nav,\n      winner_string: winnerString,\n      player_names: playerNames,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GoBackPopUp, {\n      open_go_back: openGoBack,\n      close_window: closeWindow.bind(this),\n      main_menu: quitGame.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayerDisconnected, {\n      player_disconnected: playerDisconnected,\n      close_window: closeWindow.bind(this),\n      main_menu: nav\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"SWsIQYSbkBxWDm4w2EXtgRCjl4k=\", false, function () {\n  return [useCookies];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Board","React","useEffect","useState","WinnerPopUp","GoBackPopUp","PlayerDisconnected","ButtonWithIcon","socket","soc","useCookies","Game","nav","p","player_number","player_names","playerColor","emptyBoxIDs","player","playerNumber","playerNames","cookies","setCookies","removeCookie","playerTurn","setPlayerTurn","step","setStep","board","setBoard","Array","fill","score","setScore","openWindow","setOpenWindow","openGoBack","setOpenGoBack","playerDisconnected","setPlayerDisconnected","winnerString","setWinnerString","initSocketEvents","on","data","updateState","player_turn","index","color","changeLineColor","displayBoxColor","indices","gameOver","winner_string","removeCookies","disconnect","restartGame","displayLine","displayLineColor","colorLines","i","at","path","goBackPopUpAppear","_step","_board","_score","handleClick","alert","emit","css_h_line","css_v_line","style","document","createElement","appendChild","createTextNode","getElementsByTagName","length","getElementById","backgroundColor","css","resetBoxColors","resetLineColors","sendRestartGame","closeWindow","quitGame","goBack","bind"],"sources":["/Users/vicphan/Projects/SENG_513/SENG_513_Assignment_3/client/src/pages/components/game.js"],"sourcesContent":["import Board from \"./board\";\nimport React, { useEffect, useState } from \"react\";\nimport WinnerPopUp from \"./popups/winner_pop_up\";\nimport GoBackPopUp from \"./popups/go_back_pop_up\";\nimport PlayerDisconnected from \"./popups/pd_pop_up\";\nimport ButtonWithIcon from \"./button_with_icon\";\nimport { socket as soc} from '../../context/socket';\nimport { useCookies } from \"react-cookie\";\n\n// Includes all the game logic\nconst Game = ({nav, p, player_number, player_names}) => {\n\n    const socket = soc;\n    const playerColor = [\"blue\", \"yellow\", \"red\"];\n    const emptyBoxIDs = [\n        [\"empty_box_0\", \"empty_box_1\", \"empty_box_2\"],\n        [\"empty_box_3\", \"empty_box_4\", \"empty_box_5\"],\n        [\"empty_box_6\", \"empty_box_7\", \"empty_box_8\"]\n    ];\n    const player = p;\n    const playerNumber = player_number;\n    const playerNames = player_names;\n    const [cookies, setCookies, removeCookie] = useCookies(['step', 'board', 'score', 'playerTurn']);\n    const [playerTurn, setPlayerTurn] = useState(cookies.playerTurn || 1);\n    const [step, setStep] = useState(cookies.step || 1);\n    const [board, setBoard] = useState(cookies.board || Array(24).fill(null));\n    const [score, setScore] = useState(cookies.score || Array(3).fill(0));\n    const [openWindow, setOpenWindow] = useState(false);\n    const [openGoBack, setOpenGoBack] = useState(false);\n    const [playerDisconnected, setPlayerDisconnected] = useState(false);\n    const [winnerString, setWinnerString] = useState(null);\n\n    useEffect(() => {\n        function initSocketEvents() {\n            socket.on(\"playerTurnTaken\", function(data){\n                updateState(data.player_turn, data.step, data.board, data.score);\n                const index = data.index;\n                const color = playerColor[data.player-1];\n                changeLineColor(index, color);\n            })\n            socket.on(\"boxFilled\", function(data){\n                displayBoxColor(data.indices, playerColor[data.player-1]);\n            })\n            socket.on(\"gameOver\", function(data){\n                gameOver(data.winner_string);\n            })\n            socket.on(\"playerDisconnected\", function(data){\n                removeCookies();\n                socket.disconnect();\n                setPlayerDisconnected(true);\n            })\n            socket.on(\"restartGame\", function(data){\n                restartGame();\n            })\n        }\n\n        function displayLine() {\n            displayLineColor(playerColor[playerNumber-1]);\n        }\n\n        function colorLines() {\n            for (let i=0; i<24; i++){\n                let player = board.at(i);\n                if (player !== null){\n                    let color = playerColor[player-1];\n                    changeLineColor(i, color);\n                }\n            }\n        }\n\n        initSocketEvents();\n        displayLine();\n        if (step === 1){\n            colorLines();\n        }\n    })\n\n    const removeCookies = () => {\n        removeCookie('playerTurn', {path: '/'});\n        removeCookie('step', {path: '/'});\n        removeCookie('board', {path: '/'});\n        removeCookie('score', {path: '/'});\n    }\n\n    const gameOver = (winner_string) => {\n        removeCookies();\n        socket.disconnect();\n        setWinnerString(winner_string);\n        setOpenGoBack(false);\n        setOpenWindow(true);\n        setPlayerDisconnected(false);\n    }\n\n    const goBackPopUpAppear = () => {\n        setOpenGoBack(true);\n        setOpenWindow(false);\n        setPlayerDisconnected(false);\n    }\n\n    const updateState = (player_turn, _step, _board, _score) => {\n        setPlayerTurn(player_turn);\n        setCookies('playerTurn', player_turn, {path: '/'});\n        setStep(_step);\n        setCookies('step', _step, {path: '/'});\n        setBoard(_board);\n        setCookies('board', _board, {path: '/'});\n        setScore(_score);\n        setCookies('score', _score, {path: '/'});\n    }\n\n    // Method that updates game logic when a horizontal or vertical line has been clicked/completed\n    // Takes in unique identifier (ID) assigned to all lines in board \n    const handleClick = (i) => {\n        if (playerTurn !== playerNumber){\n            alert(\"Not your turn!\");\n            return;\n        }\n        if (board.at(i) !== null){\n            alert(\"Invalid move!\");\n            return;\n        }\n        const index = i;\n        const player = playerNumber;\n        socket.emit(\"handleClick\", {player, index});\n    }\n\n    // changes either vertical or horizontal line based on color passed in\n    const displayLineColor = (color) => {\n        let css_h_line = \".h_line:hover{ background-color: \" + color + \" }\";\n        let css_v_line = \".v_line:hover{ background-color: \" + color + \" }\";\n\n        let style = document.createElement('style');\n\n        style.appendChild(document.createTextNode(css_h_line));\n        style.appendChild(document.createTextNode(css_v_line));\n\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    // displays box color based on indice and color specified\n    const displayBoxColor = (indices, color) => {\n        for (let i = 0; i < indices.length; i++) {\n            let index = indices[i];\n            if (document.getElementById(\"empty_box_\" + index)) {\n                document.getElementById(\"empty_box_\" + index).style.backgroundColor = color;\n            }\n            else {\n                let css = \"#empty_box_\" + index + \"{ background-color: \" + color + \" }\";\n                let style = document.createElement('style');\n\n                style.appendChild(document.createTextNode(css));\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        }\n\n    }\n\n    // resets boxes to default color\n    const resetBoxColors = () => {\n        displayBoxColor([0, 1, 2, 3, 4, 5, 6, 7, 8], \"black\");\n    }\n\n    // changes specified line to specified color\n    const changeLineColor = (index, color) => {\n        document.getElementById(\"line_\" + index).style.backgroundColor = color;\n    }\n\n    // reset all line colors to default\n    const resetLineColors = () => {\n        for (let i = 0; i < 24; i++) {\n            document.getElementById(\"line_\" + i).style.backgroundColor = null;\n        }\n    }\n\n    // restarts game by resetting states\n    const restartGame = () => {\n        alert(\"Game was restarted by one of the players\");\n        removeCookies();\n        setPlayerTurn(1);\n        setStep(1);\n        setBoard(Array(24).fill(null));\n        setScore(Array(3).fill(0));\n        setOpenGoBack(false);\n        setOpenWindow(false);\n        setPlayerDisconnected(false);\n        setWinnerString(null);\n        resetLineColors();\n        displayLineColor(playerColor[playerTurn - 1]);\n        resetBoxColors();\n    }\n\n    const sendRestartGame = () => {\n        socket.emit(\"restartGame\");\n    }\n\n    // closes window by setting open_window state to false\n    const closeWindow = () => {\n        setOpenWindow(false);\n    }\n\n    const quitGame = () => {\n        socket.emit(\"playerDisconnected\", {playerNumber});\n        removeCookies();\n        socket.disconnect();\n        const goBack = nav;\n        goBack();\n    }\n\n    return(\n        <div>\n            <div className=\"center\">\n                <p className=\"info_text\"><b>Current turn:</b> {playerNames[playerTurn-1]}</p>\n                <p className=\"info_text\">{playerNames[0]}: {score[0]}</p>\n                <p className=\"info_text\">{playerNames[1]}: {score[1]}</p>\n                <p className=\"info_text\">{playerNames[2]}: {score[2]}</p>\n            </div>\n            <div className=\"button_div center padding_top_bottom\">\n                <ButtonWithIcon type=\"back\" onClick={goBackPopUpAppear} />\n                <ButtonWithIcon type=\"replay\" onClick={sendRestartGame.bind(this)} />\n            </div>\n            <Board empty_box_ids={emptyBoxIDs} handleClick={handleClick.bind(this)} />\n            <WinnerPopUp open_window={openWindow} close_window={closeWindow.bind(this)} main_menu={nav} winner_string={winnerString} player_names={playerNames} score={score}/>\n            <GoBackPopUp open_go_back={openGoBack} close_window={closeWindow.bind(this)} main_menu={quitGame.bind(this)} />\n            <PlayerDisconnected player_disconnected={playerDisconnected} close_window={closeWindow.bind(this)} main_menu={nav} />\n        </div>\n    )\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}